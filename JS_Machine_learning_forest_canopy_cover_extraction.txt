
var AOI = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-92.0113079907245, 33.804512782480664],
          [-92.0113079907245, 33.38699116799063],
          [-91.4400189282245, 33.38699116799063],
          [-91.4400189282245, 33.804512782480664]]], null, false);

// Load The National Agriculture Imagery Program (NAIP)  aerial imagery

var NAIP = ee.ImageCollection('USDA/NAIP/DOQQ')
  .filterDate('2021-01-01', '2021-12-31')
  .mosaic().clip(AOI)
Map.addLayer(NAIP, {}, 'NAIP DOQQ');
print("NAIP",NAIP)

// addNAIPIndices and texture metrics (GLCM) 
var addNAIPIndices = require("users/UAM/gee:addNAIPIndices");
var NAIPIndices = addNAIPIndices.addIndices(NAIP);
print("NAIPIndices",NAIPIndices)

var indices_select = NAIPIndices.select([
  "NDVI",
  "NDWI",
  "EVI",
  "GRVI",
  "MSAVI"]); 
print("Indices Seleccionados",indices_select)


// addNAIPIndices and texture metrics (GLCM) 
var addNAIPglcm = require("users/UAM/gee:addNAIPglcm");
var NAIPglcm = addNAIPglcm.addGLCM(NAIP);
print("NAIPglcm",NAIPglcm)

var glcm_select = NAIPglcm.select([
  //"entropy",
  "N_contrast",
  "N_savg",
  "N_ent",
  "N_dent",
  "N_dvar",
  "N_diss",
  "N_inertia"]); 
print("glcm_select",glcm_select)

var DEM1m = ee.ImageCollection("USGS/3DEP/1m").mosaic()

// Make a composite.
var composite =  NAIP
  .addBands(indices_select)
  .addBands(glcm_select)
  .addBands(DEM1m)

var Drew_County_Reference_dataset = ee.FeatureCollection("projects/ee-uam/assets/Drew_County_Reference_dataset");

var Forest = Drew_County_Reference_dataset.filterMetadata('Class','equals',2)
var Non_forest = Drew_County_Reference_dataset.filterMetadata('Class','equals',1)

print(Forest)
print(Non_forest)

Map.addLayer(Forest, {color: 'green', size: 5});
Map.addLayer(Non_forest, {color: 'yellow', size: 5});

var classProperty = 'Class';

// Sample the composite to generate training data.  Note that the
// class label is stored in the 'Class' property.
var sample = composite.sampleRegions({
  collection: Drew_County_Reference_dataset,
  properties: [classProperty],
  scale: 1
});


// Optionally, do some accuracy assessment.  Fist, add a column of
// random uniforms to the training dataset.
var sample = sample.randomColumn({ seed: 1 });

// We want to reserve some of the data for testing, to avoid overfitting the model.
// Roughly 70% training, 30% testing.
var training = sample.filter(ee.Filter.lt('random', 0.7));
var validation = sample.filter(ee.Filter.gte('random', 0.7));
// Print some info about the training dataset.
print(training)

// Train a CART classifier.
// Trained with 70% of our data.
var classifier = ee.Classifier.smileRandomForest({numberOfTrees:120, 
                                                  variablesPerSplit:5,
                                                  minLeafPopulation:5, 
                                                  bagFraction:0.5, 
                                                  maxNodes:20, 
                                                  seed:1  })
    .train({
      features: training, 
      classProperty: 'Class', 
      inputProperties: composite.bandNames()
    });

var trainAccuracy = classifier.confusionMatrix().accuracy();
print('trainAccuracy', trainAccuracy); //

// Classify the composite.
var testAccuracy = validation.classify(classifier);

// Get a confusion matrix representing expected accuracy.
  var cm = testAccuracy.errorMatrix('Class', 'classification');
  var oa =  cm.accuracy(); 
  var oap = oa.toString();
  var ua = cm.consumersAccuracy().project([1]);
  var pa = cm.producersAccuracy().project([0]);
  var f1 = (ua.multiply(pa).multiply(2.0)).divide(ua.add(pa)) ;
  var f1p = f1.multiply(1000).round().divide(10).toList();
  var kappa = cm.kappa();

// Print the confusion matrix.  
print("Overall Accuracy:", oa); 
print("Class-Wide F1 statistic:",f1p);
print("kappa:", kappa);
print("User's Accuracy:", ua);
print("Producer's Accuracy:", pa);















